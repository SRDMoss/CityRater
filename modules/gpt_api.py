from db_init import collex, generate_cities
from openai import OpenAI
import json

# Initializing OpenAI client
client = OpenAI()  

# Path to the error log file
log_file_path = "error_log.txt"  

# Function to log errors to a file
def log_error(message, city_doc):
    with open(log_file_path, 'a', encoding='utf-8') as log_file:  # Open log file in append mode with UTF-8 encoding
        log_file.write(f"{message} - Document ID: {city_doc['_id']}, City: {city_doc['city']}, Admin: {city_doc['admin']}, ISO3: {city_doc['iso3']}\n")  # Write error message and city details to log file

# Loop through each city document generated by generate_cities()
for city_doc in generate_cities():
    # Extract city details
    city_name, admin_name, iso3 = city_doc['city'], city_doc['admin'], city_doc['iso3']  

    try:
        # API call for language data (Extract)
        response = client.chat.completions.create(
            model="gpt-4-turbo-preview",
            response_format={"type": "json_object"},
            messages=[
                {"role": "system", "content": "Output JSON."},
                {"role": "user", "content": f"Top two languages used in {city_name} ({admin_name}, {iso3}). Use '{city_name}' as key, languages as sub-keys, and the percentage (from 0.00 to 1.00) of common public interactions."}
            ]
        )

        # Extract data from the response. 
        content = json.loads(response.choices[0].message.content)  # Parse
        languages = content.get(city_name, {})  # Extract

        # Check if empty
        if not languages:  
            raise ValueError("No language data found for the API response.")
        
        # Prepare content for database (Transform)
        sorted_languages = sorted(languages.items(), key=lambda x: x[1], reverse=True)  # Sort by percentage of speakers in city
        lang_1, lang_percent_1 = sorted_languages[0] if sorted_languages else ('None', 0)  # Top language and percentage of speakers in population
        lang_2, lang_percent_2 = sorted_languages[1] if len(sorted_languages) > 1 else ('None', 0)  # Second language

        # Update the city document in the database with language data (Load)
        update_result = collex.update_one(
            {'_id': city_doc['_id']},
            {'$set': {
                'lang_1': lang_1, 'lang_percent_1': lang_percent_1,
                'lang_2': lang_2, 'lang_percent_2': lang_percent_2
            }}
        )

        if update_result.matched_count == 0:  # Check if any document matched the update criteria
            raise ValueError("No document matched the update criteria.")
        elif update_result.modified_count == 0:  # Check if the document was modified
            raise ValueError("Document matched but was not modified.")

    # Handle any exceptions
    except Exception as e:  
        error_message = f"An error occurred: {e}"
        print(error_message)
        log_error(error_message, city_doc)

# Loop through each city document generated by generate_cities() again for continent data
for city_doc in generate_cities():
    # Extract city details
    city_name, admin_name, iso3 = city_doc['city'], city_doc['admin'], city_doc['iso3']  

    try:
        # API call for continent data (Extract)
        response = client.chat.completions.create(
            model="gpt-4-turbo-preview",
            response_format={"type": "json_object"},
            messages=[
                {"role": "system", "content": "Output JSON."},
                {"role": "user", "content": f"Continent of {city_name} ({admin_name}, {iso3}). 'continent' as key, 'North America','South America', 'Europe','Africa', 'Asia', 'Indonesia', or 'Antarctica' as value"}
            ]
        )

        # Extract data from the response. 
        content = json.loads(response.choices[0].message.content)  # Parse the API response content
        continent = content.get('continent')  # Get continent data from the response

        if not continent:  # Check if continent data is empty
            raise ValueError("No continental data found for the API response.")

        # Update the city document in the database with continent data
        update_result = collex.update_one({'_id': city_doc['_id']},{'$set': {'continent': continent}})

        if update_result.matched_count == 0:  # Check if any document matched the update criteria
            raise ValueError("No document matched the update criteria.")
        elif update_result.modified_count == 0:  # Check if the document was modified
            raise ValueError("Document matched but was not modified.")

    # Handle any exceptions
    except Exception as e:  
        error_message = f"An error occurred: {e}"
        print(error_message)
        log_error(error_message, city_doc)